name: Reusable CI Workflow

on:
  workflow_call:
    inputs:
      project-key:
        required: true
        type: string
      sonar-check-enabled:
        required: false
        type: boolean
        default: false
      pr-title:
        required: true
        type: string
      package-name:
        required: true
        type: string
    secrets:
      github-token:
        required: true
      github-username:
        required: true

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # 1. Checkout the repo
      - name: Checkout Code
        uses: actions/checkout@v3

      # 2. Set up Java
      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # 3. Make Maven Wrapper Executable
      - name: Make Maven Wrapper Executable
        run: chmod +x ./mvnw

      # 4. Configure Maven for GitHub Packages
      - name: Configure Maven for GitHub Packages
        env:
          GITHUB_USERNAME: ${{ secrets.github-username }}
          GITHUB_TOKEN: ${{ secrets.github-token }}
        run: |
          mkdir -p ~/.m2
          cat <<EOF > ~/.m2/settings.xml
          <settings>
            <servers>
              <server>
                <id>github</id>
                <username>${GITHUB_USERNAME}</username>
                <password>${GITHUB_TOKEN}</password>
              </server>
            </servers>
          </settings>
          EOF

      # 5. Validate PR title pattern
      - name: Validate PR Title
        if: ${{ github.event_name == 'pull_request' && inputs.pr-title != '' }}
        run: |
          PR_TITLE="${{ github.event.pull_request.title }}"
          PATTERN="${{ inputs.pr-title }}"
          echo "PR title: $PR_TITLE"
          echo "Expected pattern: $PATTERN"
          if [[ "$PR_TITLE" =~ $PATTERN ]]; then
            echo "✅ PR title is valid"
          else
            echo "❌ PR title does not match required pattern: $PATTERN"
            exit 1
          fi

      # 6. Code formatting check
      - name: Check code formatting
        run: ./mvnw spotless:check

      # 7. Build (with version if needed)
#      - name: Read build.version and build
#        run: |
#          export VERSION=$(grep build.version version.properties | cut -d'=' -f2)
#          echo "Building version: $VERSION"
#          ./mvnw -Dbuild.version=$VERSION clean install

      - name: Check if Maven version already exists
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PACKAGE_NAME: "${{inputs.package-name}}"
        run: |
          VERSION=$(grep build.version version.properties | cut -d'=' -f2)
          echo "Detected build version: $VERSION"

          OWNER="${GITHUB_REPOSITORY%/*}"
          REPO="${GITHUB_REPOSITORY#*/}"
          
          echo "Checking for version $VERSION in $OWNER/$REPO..."

          PACKAGE_URL="https://api.github.com/users/$OWNER/packages/maven/$PACKAGE_NAME/versions"
          RESPONSE=$(curl -s -H "Authorization: Bearer $GITHUB_TOKEN" "$PACKAGE_URL")

          # Debug output
          echo "Raw API response: $RESPONSE"

          # Check if the response is a valid JSON array before using jq
          if echo "$RESPONSE" | jq -e 'type == "array"' > /dev/null; then
            MATCHING_VERSION=$(echo "$RESPONSE" | jq -r ".[] | select(.name == \"$VERSION\")")
            if [[ -n "$MATCHING_VERSION" ]]; then
              echo "❌ Version $VERSION already exists in GitHub Packages."
              exit 1
            else
              echo "✅ Version $VERSION not found. Proceeding with build."
            fi
          else
            echo "⚠️ API did not return a valid array. Package may not be published yet, or the token has insufficient access."
            echo "Response: $RESPONSE"
            exit 0
          fi

      - name: Build with Maven
        run: ./mvnw -Dbuild.version=$VERSION clean install

      # 8. Unit Tests
      - name: Run unit tests
        run: ./mvnw test

      # 9. Print Project Key
      - name: Print Project Key
        run: |
          echo "Project Key: ${{ inputs['project-key'] }}"


