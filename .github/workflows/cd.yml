# .github/workflows/reusable-publish.yml
name: Reusable Maven Publish

on:
  workflow_call:
    inputs:
      java-version:
        required: false
        default: '17'
        type: string
      image-name:
        required: true
        type: string
      chart-name:
        required: true
        type: string
      service-name:
        required: true
        type: string
      namespace:
        required: true
        type: string
      cluster-name:
        required: true
        type: string
      working-directory:
        required: true
        type: string

    secrets:
      MAVEN_USERNAME:
        required: true
      MAVEN_PASSWORD:
        required: true
      DOCKER_USERNAME:
        required: true
      DOCKER_PASSWORD:
        required: true
#      KUBECONFIG_CONTENT:
#        required: true
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true

jobs:
  publish:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Java ${{ inputs.java-version }}
        uses: actions/setup-java@v3
        with:
          java-version: ${{ inputs.java-version }}
          distribution: 'temurin'

      - name: Make Maven Wrapper Executable
        run: chmod +x mvnw

      - name: Set Project Version from version.properties
        run: |
          VERSION=$(grep build.version version.properties | cut -d'=' -f2)
          echo "Using build version: $VERSION"
          ./mvnw versions:set -DnewVersion=$VERSION

      - name: Publish to GitHub Packages
        env:
          GITHUB_USERNAME: ${{ secrets.MAVEN_USERNAME }}
          GITHUB_TOKEN: ${{ secrets.MAVEN_PASSWORD }}
        run: |
          ./mvnw --batch-mode deploy

      - name: Login to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build and Push Docker image
        run: |
          echo "<settings><servers><server><id>github</id><username>${{ secrets.GITHUB_USERNAME }}</username><password>${{ secrets.GITHUB_TOKEN }}</password></server></servers></settings>" > settings.xml
          docker build --build-arg GITHUB_USERNAME=${{ secrets.GITHUB_USERNAME }} \
                 --build-arg GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }} \
                 --build-arg WORK_DIR=. \
                 -t ${{ secrets.DOCKER_USERNAME }}/${{ inputs.image-name }}:latest .
          docker push ${{ secrets.DOCKER_USERNAME }}/${{ inputs.image-name }}:latest


      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Terraform Init
        working-directory: ${{inputs.working-directory}}
        run: terraform init

      - name: Terraform Apply
        working-directory: ${{inputs.working-directory}}
        run: terraform apply -auto-approve
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ap-south-1



      - name: Update kubeconfig with cluster
        run: |
          aws eks update-kubeconfig --region ap-south-1 --name ${{ inputs.cluster-name }}

      - name: Use correct EKS context
        run: |
          CONTEXT=$(kubectl config get-contexts -o name | grep ${{ inputs.cluster-name }})
          echo "Using context: $CONTEXT"
          kubectl config use-context "$CONTEXT"
      

      #      - name: Set up Kubeconfig
#        run: |
#          mkdir -p ~/.kube
#          echo "${{ secrets.KUBECONFIG_CONTENT }}" | base64 --decode > ~/.kube/config
#          chmod 600 ~/.kube/config

      - name: Debug kubeconfig
        run: |
          kubectl config get-contexts
          kubectl get nodes


      - name: Set up Helm
        uses: azure/setup-helm@v3

      # Add a new step after Configure AWS Credentials to fetch the password

      - name: Retrieve RDS password from AWS Secrets Manager
        id: fetch_rds_password
        run: |
          # Replace YOUR_SECRET_NAME with your actual Secrets Manager secret name or ARN
          PASSWORD=$(aws secretsmanager get-secret-value --secret-id YOUR_SECRET_NAME --query SecretString --output text)
          echo "rds_password=$PASSWORD" >> $GITHUB_OUTPUT


      - name: Deploy with Helm
        run: |
          helm upgrade --install ${{ inputs.service-name }} ./helm/${{ inputs.chart-name }} \
          --namespace ${{ inputs.namespace }} --create-namespace \
          --set image.repository=${{ secrets.DOCKER_USERNAME }}/${{ inputs.image-name }} \
          --set image.tag=latest \
          --set db.password=${{ steps.fetch_rds_password.outputs.rds_password }}

      
          
      


      
        
